// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations
}

enum UserRole {
  SUPER_ADMIN
  MANAGER
  ADMIN
  MEMBER
}

model user {
  id            String     @id @default(cuid())
  userName      String     @unique
  fullName      String
  email         String     @unique
  password      String
  role          UserRole[] @default([MEMBER])
  emailVerified Boolean    @default(false)

  userProfile userProfile?
  attachments attachment[]
  posts       Post[]
  products    product[]
  comments    comment[]
  likes       like[]
  reviews     review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model userProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bio         String?
  location    String?
  dateOfBirth DateTime?
  phoneNumber String?
  avatarUrl   String?
  socialLinks Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  productId String
  product   product @relation(fields: [productId], references: [id])
  postId    String
  post      Post    @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model attachment {
  id     String @id @default(cuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  fileName String
  fileUrl  String
  fileType String
  fileSize Int
  fileHash String

  productId String?
  product   product? @relation(fields: [productId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       String  @id @default(cuid())
  authorId String?
  author   user?   @relation(fields: [authorId], references: [id])

  title       String
  slug        String   @unique
  content     String?
  thumbnail   String?
  isPublished Boolean  @default(false)
  tags        String[] @default([])

  attachments attachment[]
  categories  category[]
  comments    comment[]
  likes       like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model product {
  id        String  @id @default(cuid())
  creatorId String?
  creator   user?   @relation(fields: [creatorId], references: [id])

  name        String  @unique
  description String?
  price       Float
  stock       Int     @default(0)
  imageUrl    String?

  attachments attachment[]
  category    category[]
  reviews     review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model comment {
  id       String @id @default(cuid())
  authorId String
  author   user   @relation(fields: [authorId], references: [id])

  content String
  postId  String?
  post    Post?   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model like {
  id     String @id @default(cuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model review {
  id     String @id @default(cuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  content   String
  rating    Int     @default(5)
  productId String
  product   product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
